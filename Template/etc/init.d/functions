
#----------------------------------------------------------------------
#      ___       ___ ___   P X E S   Universal  Linux  Thin  Client
#     /__/\\_// /__ /__    Copyright(C) 2003 by Diego Torres Milano
#    /    // \\/__  __/    All rights reserved.  http://pxes.sf.net
#
# Author: Diego Torres Milano <diego@pxes.org>
# $Id: functions 1144 2005-09-15 16:31:57Z diego $
#----------------------------------------------------------------------

setcolor()
{
	#------------------------------------------------------------
	# usage: setcolor {red|green|yellow|blue|magenta|cyan|bold|reset}
	#
	# set the specified color or reset
	#------------------------------------------------------------
	local C

	C=30

	case "$1" in
		red)
			C=31
			;;

		green)
			C=32
			;;

		yellow)
			C=33
			;;

		blue)
			C=34
			;;

		magenta)
			C=35
			;;

		cyan)
			C=36
			;;

		bold)
			C=37
			;;

		reset)
			C=
			;;
	esac

	if [ -z "$C" ]
	then
		echo -n "[m"
	else
		echo -n "[1;${C}m"
	fi
}

error()
{
	#------------------------------------------------------------
	# usage: error -w msg...
	# -w: wait for key press after message
	# -l: print a NL before message
	# -e: see echo -e
	# -t: n is the tty number
	#
	# prints an error message in stderr and optionally waits for
	# a key press.
	#------------------------------------------------------------
	local W=0 L=0 E= T=

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-w)
						W=1
						;;

					-l)
						L=1
						;;

					-e)
						E="-e"
						;;

					-t)
						T="$1"
						shift
						;;

					*)
						echo "usage: error [-lwe] [-t n] msg..." >&2
						echo "was called as: error $@"
						return 1
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	(
		[ "$L" -eq 1 ] && echo "" 
		setcolor red
		echo $E "ERROR: $@"
		setcolor reset
	) >&2

	[ -n "$T" ] && chvt $T
	[ "$W" -eq 1 ] && pressreturn
}

fatal()
{
	#------------------------------------------------------------
	# usage: fatal [-wler] msg...
	# -w: wait for key press after message
	# -l: print a NL before message
	# -e: see echo -e
	# -r: reboot
	#
	# prints an error message in stderr and optionally waits for
	# a key press, then exit.
	#------------------------------------------------------------
	local R=0 O= REPLY=

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-r)
						R=1
						;;

					*)
						O="$O $1"
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	error $O "$@"

	if [ "$R" -eq 1 ]
	then
		read 'Press <ENTER> to reboot...' REPLY
		reboot
	else
		exit 1
	fi
}

warning()
{
	#------------------------------------------------------------
	# usage: warning [-wle] msg...
	#
	# prints a warning message in stderr
	#------------------------------------------------------------
	local W=0 L=0 E=

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-w)
						W=1
						;;

					-l)
						L=1
						;;

					-e)
						E="-e"
						;;

					*)
						echo "usage: warning [-lwe] msg..." >&2
						return 1
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	(
		[ "$L" -eq 1 ] && echo "" 
		setcolor yellow
		echo $E "WARNING: $@"
		setcolor reset
	) >&2

	[ "$W" -eq 1 ] && pressreturn
}

message()
{
	#------------------------------------------------------------
	# usage: message [-c|--color color] msg...
	#
	# prints a message msg in stdout
	# as message arguments are passed verbatim to 'echo' options
	# can also be included
	#------------------------------------------------------------
	local COLOR=magenta

	case "$1" in
		-c|--color)
			COLOR=$2
			shift 2
			;;
	esac

	setcolor $COLOR
	echo $*
	setcolor reset
}

bootmsg()
{
	#------------------------------------------------------------
	# usage: bootmsg [-l] [-m] msg...
	# -n: dont't add nl (default for some levels)
	# -l: echo a nl after msg
	# -m: write with message function
	# -f: force write (no matter what BOOT_MESSAGES level)
	# -w: call warning in addition to bootmsg
	# -e: call error in addition to bootmsg
	#
	# prints a message while booting, '.' or nothing depending on
	# BOOT_MESSAGES value.
	# writes to /var/log/bootmsg too.
	#------------------------------------------------------------
	local NL=0 USEMESSAGE=echo FORCE=0 TAG=

	: ${BMN:=0} ${BML:='/var/log/bootmsg'}
	BMN=$(($BMN + 1))

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-n)
						NL=0
						;;

					-l)
						NL=1
						;;

					-m)
						if [ "$BOOTUP" != "serial" ]
						then
							USEMESSAGE=message
						fi
						;;

					-f)
						FORCE=1
						;;

					-w)
						TAG=WARNING:
						USEMESSAGE="warning -l"
						FORCE=1
						;;

					-e)
						TAG=ERROR:
						USEMESSAGE="error -l"
						FORCE=1
						;;

					*)
						echo "usage: bootmsg [-lmnfwe] msg..." >&2
						return 1
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	if [ "$NL" -eq 0 ]
	then
		EO="-n"
	else
		EO=""
	fi

	case "$BOOT_MESSAGES" in
		0)
			if [ "$FORCE" -eq 1 ]
			then
				$USEMESSAGE "$@" >&2
			fi
			;;

		1)
			if [ "$FORCE" -eq 1 ]
			then
				$USEMESSAGE "$@" >&2
			else
				if [ -r /proc/splash ]
				then
					# FIXME
					# 6 constant
					progressbar $(( $BMN * 6 ))
				else
					echo $EO "." >&2
				fi
			fi
			;;

		*)
			$USEMESSAGE "$@" >&2
			;;
	esac

	{
		[ "$BMN" -lt 100 ] && echo -n "0"
		[ "$BMN" -lt 10 ] && echo -n "0"
		echo "$BMN: ${TAG}$@" 
	} >> $BML

	return 0
}

log()
{
	#------------------------------------------------------------
	# usage: log [-m n] file msg...
	#
	# Log to a file
	#------------------------------------------------------------
	local M=-1 USAGE FILE MSG

	USAGE="usage: log [-m n] file msg..."

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-m)
						shift
						M=$1
						;;

					*)
						echo "$USAGE" >&2
						return 1
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	if [ "$#" -ne 2 ]
	then
		echo "$USAGE" >&2
		return 1
	fi

	LOG=$1
	shift
	MSG="$@"

	if [ $M -gt -1 ]
	then
		logrotate -m $M $LOG
	fi

	echo "$MSG" >> $LOG
}

logrotate()
{
	#------------------------------------------------------------
	# usage: logrotate [-m n] file
	#
	# Fake logrotate (trim a log)
	#------------------------------------------------------------
	local USAGE M FILE

	USAGE="usage: logrotate [-m n] file"

	if [ "$1" = '-m' ]
	then
		shift
		M=${1:-100}
		shift
	fi

	FILE=$1

	if [ -z "$FILE" ]
	then
		echo "$USAGE" >&2
		return 1
	fi

	if [ -f "$FILE" ]
	then
		if [ ! -w "$FILE" ]
		then
			error "Cannot rotate log $FILE"
			return 1
		fi

		tail -n $M $FILE > /tmp/log.$$
		cp /tmp/log.$$ $FILE
		rm /tmp/log.$$
	fi
}

pressreturn()
{
	local REPLY

	echo -n "Press <RETURN> to continue..."
	read REPLY
}

get_kclvars()
{
	#------------------------------------------------------------
	# usage: get_kclvars [cmdline...]
	#
	# Gets the list of valid PXES variables of a kernel command 
	# line parameter or "" if command line is empty.
	# The returned list of variables is mapped to un-abbreviated
	# names and converted to lower case.
	#------------------------------------------------------------
	local C=1 VARS= RET= CMDLINE=

	#		warning "usage: get_kclvars [cmdline]" >&2
	#		echo "offending command line: 'get_kclvars $@'" >&2
	#		echo "number of arguments: $#" >&2
	#		i=1
	#		while [ $# -gt 0 ]
	#		do
	#			echo "arg $i=$1" >&2
	#			shift
	#			i=$(( $i + 1 ))
	#		done

	case "$#" in
		0)
			if [ ! -r /proc/cmdline ]
			then
				echo ""
				return 0
			fi
			CMDLINE=`cat /proc/cmdline`
			;;

		*)
			CMDLINE="$@"
			;;
	esac

	set -- $CMDLINE
	VARS=
	while [ $C -le $# ]
	do
		eval VARS="\"$VARS \`av \${$C%%=*}\`\""
		C=$(($C + 1 ))
	done

	pxes_vars -l > /tmp/vars
	for v in $VARS
	do
		v=`lc $v`
		if grep "^$v\$" /tmp/vars > /dev/null
		then
			RET="$RET $v"
		fi
	done
	rm -f /tmp/vars

	echo $RET
	return 0
}

get_kclval()
{
	#------------------------------------------------------------
	# usage: get_kclval var [cmdline...]
	#
	# Gets the value of a kernel command line parameter or "" if
	# not set
	#------------------------------------------------------------
	local VAR V NAME VAL C CMDLINE

	case "$#" in
		1)
			VAR=$1
			if [ ! -r /proc/cmdline ]
			then
				echo ""
				return 0
			fi
			CMDLINE="`cat /proc/cmdline`"
			;;

		*)
			VAR="$1"
			CMDLINE="$*"
			;;
	esac

	set -- $CMDLINE
	C=$#
	while [ $C -gt 0 ]
	do
		eval V=\$$C
		C=$(($C - 1))
		NAME=${V%%=*}
		# would be great, but busybox's sed doesn't support it
		#VAL=`echo "$V" | sed "s/$NAME=?//;"`
		VAL=`echo "$V" | sed "s/$NAME=*//;"`
		case "$VAL" in
			"")
				# assume a boolean variable
				VAL=1
				;;

			'NULL')
				# set null
				VAL=""
				;;
		esac

		if [ "$NAME" = "$VAR" -o "$NAME" = `av $VAR` -o "$NAME" = `uc "$VAR"` ]
		then
			echo "$VAL"
			return 0
		fi
	done

	echo ""
	return 0
}

pxes_vars()
{
	#------------------------------------------------------------
	# usage: pxes_vars [-l]
	# -l: returns lower case names
	#
	# Returns the list of PXES variable names
	#------------------------------------------------------------
	local L=""
	
	if [ "$1" = '-l' ]
	then
		LC="| tr '[A-Z]' '[a-z]'"
	fi

	if [ ! -r /etc/pxes.conf ]
	then
		echo ""
		return 1
	fi

	##eval "sed -n 's/\([A-Z][A-Z_0-9]*\)=.*/\1/p' /etc/pxes.conf $LC"
	eval "cat /etc/pxes.conf /etc/pxes.d/*.conf 2>/dev/null | sed -n 's/\([A-Z][A-Z_0-9]*\)=.*/\1/p' $LC"
}

av() {
	#------------------------------------------------------------
	# usage: av var
	#  var: the lowercase PXES var
	#
	# Given a pxes variable name var returns the abbreviation if
	# exists.
	# Return the same value otherwise
	#------------------------------------------------------------
	local VAR

	VAR=$1
	case "$VAR" in
		ask)
			VAR=ASK
			;;

		boot_messages)
			VAR=bm
			;;

		bm)
			VAR=BOOT_MESSAGES
			;;

		configuration_directory)
			VAR=cdir
			;;

		cdir)
			VAR=CONFIGURATION_DIRECTORY
			;;

		configuration_server_name)
			VAR=csn
			;;

		csn)
			VAR=CONFIGURATION_SERVER_NAME
			;;

		ica_ask_enabled)
			VAR=iae
			;;

		iae)
			VAR=ICA_ASK_ENABLED
			;;

		ica_server_address)
			VAR=ica
			;;

		ica)
			VAR=ICA_SERVER_ADDRESS
			;;

		ica_server_name)
			VAR=icas
			;;

		icas)
			VAR=ICA_SERVER_NAME
			;;

		keyboard_layout)
			VAR=kl
			;;

		kl)
			VAR=KEYBOARD_LAYOUT
			;;

		keyboard_model)
			VAR=km
			;;

		km)
			VAR=KEYBOARD_MODEL
			;;

		lce)
			VAR=LOCAL_CONFIGURATION_ENABLED
			;;

		local_configuration_enabled)
			VAR=lce
			;;

		lpe)
			VAR=LOCAL_PRINTER_ENABLED
			;;

		local_printer_enabled)
			VAR=lpe
			;;

		ltsp_server_and_root)
			VAR=ltsp
			;;

		ltsp)
			VAR=LTSP_SERVER_AND_ROOT
			;;

		mouse_accel_div)
			VAR=mdiv
			;;

		mdiv)
			VAR=MOUSE_ACCEL_DIV
			;;
			
		mouse_accel_mult)
			VAR=mmul
			;;

		mmul)
			VAR=MOUSE_ACCEL_MULT
			;;

		mouse_accel_thr)
			VAR=mthr
			;;

		mthr)
			VAR=MOUSE_ACCEL_THR
			;;

		mouse_device)
			VAR=mdev
			;;

		mdev)
			VAR=MOUSE_DEVICE
			;;

		mouse_emulate_3_buttons_enabled)
			VAR=me3e
			;;

		me3e)
			VAR=MOUSE_EMULATE_3_BUTTONS_ENABLED
			;;

		mouse_emulate_3_timeout)
			VAR=me3t
			;;

		me3t)
			VAR=MOUSE_EMULATE_3_TIMEOUT
			;;

		mouse_handed)
			VAR=mh
			;;

		mh)
			VAR=MOUSE_HANDED
			;;

		mouse_protocol)
			VAR=mp
			;;

		mp)
			VAR=MOUSE_PROTOCOL
			;;

		mouse_protocol_prefix)
			VAR=mpp
			;;

		mpp)
			VAR=MOUSE_PROTOCOL_PREFIX
			;;

		mouse_wheel_enabled)
			VAR=mwe
			;;

		mwe)
			VAR=MOUSE_WHEEL_ENABLED
			;;

		network_card)
			VAR=nc
			;;

		nc)
			VAR=NETWORK_CARD
			;;

		network_card_options)
			VAR=nco
			;;

		nco)
			VAR=NETWORK_CARD_OPTIONS
			;;

		network_device)
			VAR=nd
			;;

		nd)
			VAR=NETWORK_DEVICE
			;;

		network_type)
			VAR=nt
			;;

		nt)
			VAR=NETWORK_TYPE
			;;

		nx)
			VAR=NX_SERVER_NAME
			;;

		nx_server_name)
			VAR=nx
			;;

		prompt_before_client)
			VAR=pbc
			;;

		pbc)
			VAR=PROMPT_BEFORE_CLIENT
			;;

		pxes_debug)
			VAR=pd
			;;

		pd)
			VAR=PXES_DEBUG
			;;

		rdp_domain)
			VAR=rd
			;;

		rd)
			VAR=RDP_DOMAIN
			;;

		rdp_geometry)
			VAR=rg
			;;

		rg)
			VAR=RDP_GEOMETRY
			;;

		rcd)
			VAR=RDP_COLOR_DEPTH
			;;

		rdp_color_depth)
			VAR=rcd
			;;

		rdp_ask_enabled)
			VAR=rae
			;;

		rae)
			VAR=RDP_ASK_ENABLED
			;;

		rdp_is_full_screen)
			VAR=rf
			;;

		rf)
			VAR=RDP_IS_FULL_SCREEN
			;;

		rdp_password)
			VAR=rp
			;;

		rp)
			VAR=RDP_PASSWORD
			;;

		rdp_server_name)
			VAR=rdp
			;;

		rdp)
			VAR=RDP_SERVER_NAME
			;;

		rdp_server_version)
			VAR=rsv
			;;

		rsv)
			VAR=RDP_SERVER_VERSION
			;;

		rdp_user)
			VAR=ru
			;;

		ru)
			VAR=RDP_USER
			;;

		rdp_version)
			VAR=rv
			;;

		rv)
			VAR=RDP_VERSION
			;;

		rdp_options)
			VAR=rdo
			;;

		rdo)
			VAR=RDP_OPTIONS
			;;

		remote_configuration_enabled)
			VAR=rce
			;;

		rce)
			VAR=REMOTE_CONFIGURATION_ENABLED
			;;

		rfb_enabled)
			VAR=rfb
			;;

		rfb)
			VAR=RFB_ENABLED
			;;

		session_default)
			VAR=sd
			;;

		sd)
			VAR=SESSION_DEFAULT
			;;

		telnet_server_name)
			VAR=telnet
			;;

		telnet)
			VAR=TELNET_SERVER_NAME
			;;

		thinlinc_server_name)
			VAR=thinlinc
			;;

		thinlinc)
			VAR=THINLINC_SERVER_NAME
			;;

		thinlinc_port)
			VAR=tlp
			;;

		thinlinc_ask_enabled)
			VAR=tlae
			;;

		tlae)
			VAR=THINLINC_ASK_ENABLED
			;;

		tlp)
			VAR=THINLINC_PORT
			;;

		thinlinc_is_full_screen)
			VAR=tlf
			;;

		tlf)
			VAR=THINLINC_IS_FULL_SCREEN
			;;

		vnc_compress_level)
			VAR=vc
			;;

		vc)
			VAR=VNC_COMPRESS_LEVEL
			;;

		vnc_display)
			VAR=vd
			;;

		vd)
			VAR=VNC_DISPLAY
			;;

		vnc_geometry)
			VAR=vg
			;;

		vg)
			VAR=VNC_GEOMETRY
			;;

		vnc_is_full_screen)
			VAR=vf
			;;

		vf)
			VAR=VNC_IS_FULL_SCREEN
			;;

		vnc_quality)
			VAR=vq
			;;

		vq)
			VAR=VNC_QUALITY
			;;

		vnc_ask_enabled)
			VAR=vae
			;;

		vae)
			VAR=VNC_ASK_ENABLED
			;;

		vnc_server_name)
			VAR=vnc
			;;

		vnc)
			VAR=VNC_SERVER_NAME
			;;

		window_manager)
			VAR=wm
			;;

		wm)
			VAR=WINDOW_MANAGER
			;;

		wait_on_error)
			VAR=woe
			;;

		woe)
			VAR=WAIT_ON_ERROR
			;;

		xdm_ask_enabled)
			VAR=xae
			;;

		xae)
			VAR=XDM_ASK_ENABLED
			;;

		xdm_method)
			VAR=xm
			;;

		xm)
			VAR=XDM_METHOD
			;;

		xdm_server_name)
			VAR=xdm
			;;

		xdm)
			VAR=XDM_SERVER_NAME
			;;

		xdm_server_port)
			VAR=xsp
			;;

		xsp)
			VAR=XDM_SERVER_PORT
			;;

		x_bpp)
			VAR=xbpp
			;;

		xbpp)
			VAR=X_BPP
			;;

		x_color_depth)
			VAR=xcd
			;;

		xcd)
			VAR=X_COLOR_DEPTH
			;;

		x_driver)
			VAR=xd
			;;

		xd)
			VAR=X_DRIVER
			;;

		x_font_server_enabled)
			VAR=xfse
			;;

		xfse)
			VAR=X_FONT_SERVER_ENABLED
			;;

		x_font_server_name)
			VAR=xfs
			;;

		xfs)
			VAR=X_FONT_SERVER_NAME
			;;

		x_font_server_port)
			VAR=xfsp
			;;

		xfsp)
			VAR=X_FONT_SERVER_PORT
			;;

		x_monitor_autodetect_enabled)
			VAR=xmae
			;;

		xmae)
			VAR=X_MONITOR_AUTODETECT_ENABLED
			;;

		x_horizontal_sync)
			VAR=xh
			;;

		xh)
			VAR=X_HORIZONTAL_SYNC
			;;

		x_numlock)
			VAR=xnum
			;;

		xnum)
			VAR=X_NUMLOCK
			;;

		x_remote_connections_enabled)
			VAR=xrce
			;;

		xrce)
			VAR=X_REMOTE_CONNECTIONS_ENABLED
			;;

		x_option_noaccel)
			VAR=xona
			;;

		xona)
			VAR=X_OPTION_NOACCEL
			;;

		x_session_type)
			# FIXME
			warning "x_session_type deprecated"
			VAR=xst
			;;

		xst)
			# FIXME
			warning "xst deprecated"
			VAR=X_SESSION_TYPE
			;;

		x_vertical_refresh)
			VAR=xv
			;;

		xv)
			VAR=X_VERTICAL_REFRESH
			;;

		x_video_modes)
			VAR=xvm
			;;

		xvm)
			VAR=X_VIDEO_MODES
			;;

		x_session_xdm)
			VAR=xsx
			;;

		xsx)
			VAR=X_SESSION_XDM
			;;

		x_session_local)
			VAR=xsl
			;;

		xsl)
			VAR=X_SESSION_LOCAL
			;;

		x_session_rdp)
			VAR=xsr
			;;

		xsr)
			VAR=X_SESSION_RDP
			;;

		x_session_ica)
			VAR=xsi
			;;

		xsi)
			VAR=X_SESSION_ICA
			;;
	esac
	
	echo $VAR
}

lc() {
	#------------------------------------------------------------
	# usage: lc val
	#
	# converts to lowercase
	#------------------------------------------------------------
	local VAL

	echo "$1" | tr '[A-Z]' '[a-z]'
}

uc() {
	#------------------------------------------------------------
	# usage: uc val
	#
	# converts to uppercase
	#------------------------------------------------------------
	local VAL

	echo "$1" | tr '[a-z]' '[A-Z]'
}

ismounted()
{
	local FS

	FS=$1
	if mount | grep "$FS " > /dev/null
	then
		return 0
	else
		return 1
	fi
}

mount_root()
{
	#------------------------------------------------------------
	# usage: mount_root root [fstype]
	#
	# makes all the magic
	#------------------------------------------------------------
	local ROOT=$1 IFS M m D DEFFSTYPE
	local FSTYPE

	if [ -z "$ROOT" ]
	then
		echo "usage: mount_root root [fstype]" >&2
		return 1
	fi
		
	if echo "$ROOT" | grep '[a-zA-Z0-9\.-][a-zA-Z0-9\.-]*:/.*' > /dev/null
	then
		DEFFSTYPE=nfs
	else
		DEFFSTYPE=iso9660
	fi
	FSTYPE=${2:-$DEFFSTYPE}

	

	case "$FSTYPE" in
		nfs)
			mount -n -t nfs -o ro,nolock $ROOT /sysroot || \
				fatal -w "$ROOT mount failed"
			cd /sysroot
			umount /proc
			/sbin/pivot_root . oldroot
			mount -n -t devfs /dev /dev
			mount -t proc /proc /proc
			ismounted /oldroot/tmp && umount /oldroot/tmp 2>/dev/null
			# BUSY
			#ismounted /oldroot/dev && umount /oldroot/dev 2>/dev/null
			#umount /oldroot 2>/dev/null
			umount /proc 2>/dev/null
			cd /

			if [ -x /sbin/init.new ]
			then
				exec /sbin/chroot . /sbin/init.new \
					< /dev/console >/dev/console 2>&1
			else
				error -w "Cannot find the init.new executable.
Perhaps you forgot to install the PXES-LTSP package in the LTSP server
"
			fi
			#/sbin/init s
			#exec /sbin/init s
			#exec /bin/busybox chroot . /sbin/init s
			#	</dev/console >/dev/console 2>&1
			;;

		*)
			if [ ! -b "$ROOT" ]
			then
				fatal "$ROOT is not a block special device"
			fi
			IFS="$IFS,"
			set -- `ls -lL $ROOT`
			M=$5
			m=$6
			D=$(($M+256+$m))
			echo $D > /proc/sys/kernel/real-root-dev
			umount /proc
			# FSTYPE must be present because /proc is not mounted
			mount -o ro -t $FSTYPE $ROOT /sysroot || \
				fatal -w "$ROOT mount failed"
			cd /sysroot
			[ -d initrd ] || mkdir initrd 2>/dev/null
			pivot_root . initrd
			exec chroot . /bin/sh -c 'exec /linuxrc' \
				</dev/console >/dev/console 2>&1
			#exec chroot . /bin/sh -c 'umount -f /initrd; exec /linuxrc' \
			#	</dev/console >/dev/console 2>&1

			# This is another alternative
			#cd /sysroot
			#pivot_root . initrd
			#exec chroot . sh -c 'umount initrd; exec /sbin/init' \
			#      <dev/console >dev/console 2>&1
			;;
	esac
}

finddev()
{
	#------------------------------------------------------------
	# usage: finddev {floppy|cdrom|hd|usbflashdisk}
	#
	# find a local device
	#------------------------------------------------------------
	local DEV RET d

	DEV=$1
	
	case "$DEV" in
		floppy)
			RET=`echo /dev/floppy/* | grep -v '/dev/floppy/\*' | cut -d ' ' -f 1`
			;;

		cdrom)
			RET=`echo /dev/cdroms/* | grep -v '/dev/cdroms/\*' | cut -d ' ' -f 1`
			;;

		hd)
			for d in /dev/discs/*
			do
				if [ "$d" = '/dev/discs/*' ]
				then
					break
				fi

				if ls -l $d | grep 'ide' >/dev/null
				then
					RET="$d"
					break
				fi
			done
			;;

		usbflashdisk)
			RET=`echo /dev/scsi/host0/bus0/target0/lun0/p* | grep -v '/dev/scsi/host0/bus0/target0/lun0/p\*' | cut -d ' ' -f 1`
			;;
	esac

	echo "$RET"
}

pad()
{
	#------------------------------------------------------------
	# usage: pad num
	#
	# pads a decimal number into 3 digits
	#------------------------------------------------------------
	case "$1" in
		[0-9])
			echo "00$1"
			;;

		[0-9][0-9])
			echo "0$1"
			;;

		[0-9][0-9][0-9])
			echo "$1"
			;;

		*)
			echo "ERROR"
			;;
	esac
}


ip2hostname()
{
	#------------------------------------------------------------
	# usage: ip2hostname [-s] IP
	#
	# generates a hostname based on IP
	# if -s is specified a short hostname is generated to suit
	# the needs of Windoze Netbios names no longer that 15 chars
	#------------------------------------------------------------
	local SHORT=0 SHORTPREFIX=P LONGPREFIX=pxes-

	if [ "$1" = '-s' ]
	then
		SHORT=1
		shift
	fi

	if [ $SHORT -eq 0 ]
	then
		echo "${LONGPREFIX}$1" | /bin/sed 's/\./-/g'
	else
		set -- $(echo $1 | sed 's/\./ /g')
		echo "${SHORTPREFIX}`pad $1``pad $2``pad $3``pad $4`"
	fi
}

session_list()
{
	#------------------------------------------------------------
	# usage: session_list [-d delim]
	#
	# list the available sessions
	# if -d delim is not specified, ' ' is used
	#------------------------------------------------------------
	local DELIM=" " SL V=0 RETVAL=""

	if [ "$1" = "-d" ]
	then
		shift
		DELIM="$1"
		shift
	fi

	SL="LOCAL XDM RDP VNC ICA NX TELNET SSH LTSP TARANTELLA THINLINC"
	for s in $SL
	do
		eval V="\${X_SESSION_$s}"
		if [ "$V" -eq 1 ]
		then
			s=`lc $s`
			if [ -z "$RETVAL" ]
			then
				RETVAL="$s"
			else
				RETVAL="${RETVAL}${DELIM}${s}"
			fi
		fi
	done	

	echo "$RETVAL"
}

ask()
{
	#------------------------------------------------------------
	# usage: ask [-a] [-l] variable [prompt]
	#
	# ask for the value of variable presenting prompt
	# the default value is the present content of variable
	# if -a is specified the value is asked even the variable's
	# previous value was not 'ask'
	# -l add a new line before the prompt
	#------------------------------------------------------------
	local ASK=1 NL=0 VARIABLE PROMPT VAL USAGE REPLY

	USAGE="usage: ask [-a] [-l] variable [prompt]"

	while [ $# -gt 0 ]
	do
		case "$1" in
			-*)
				case "$1" in
					-a)
						ASK=0
						;;

					-l)
						NL=1
						;;

					*)
						echo "$USAGE" >&2
						return 1
						;;
				esac
				shift
				;;

			*)
				break
				;;
		esac
	done

	VARIABLE=$1

	if [ -z "$VARIABLE" ]
	then
		echo "$USAGE" >&2
		return 1
	fi
		
	eval VAL="\$$VARIABLE"

	if [ "$ASK" -ne 0 ]
	then
		if [ 'ask' != "`lc "$VAL"`" ]
		then
			return
		fi
	fi

	if [ "$NL" -eq 1 ]
	then
		echo
	fi

	PROMPT=${2:-"Enter value for $VARIABLE"}
	if [ -n "$VAL" -a 'ask' != "`lc "$VAL"`" ]
	then
		PROMPT="$PROMPT [$VAL]"
	fi
	PROMPT="$PROMPT: "

	REPLY=
	read -p "$PROMPT" REPLY
	if [ -n "$REPLY" ]
	then
		eval $VARIABLE=\'"$REPLY"\'
	fi
}

get_MAC()
{
	local D=${NETWORK_DEVICE:-eth0}

	[ $# -ge 1 ] && D="$1"

	/sbin/ifconfig "$D" | sed -n '/HWaddr/s/.*HWaddr \([0-9A-F:-]*\) *$/\1/; s/-/:/g; /[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]/s/://gp' | cut -c 1-12
}

#get_network()
#{
#	local NETWORK IPADDR NETMASK USAGE
#
#	USAGE="usage: get_network IPADDR NETMASK"
#	
#	if [ "$#" -lt 2 ]
#	then
#		echo "$USAGE" >&2
#		return
#	fi
#
#	IPADDR=$1
#	NETMASK=$2
#	
#	eval `ipcalc --network $IPADDR $NETMASK`
#	echo "$NETWORK"
#}

rtrim()
{
	local S="$1"

	echo "$S" | sed 's/[ 	]*$//'
}

keyboard()
{
	#------------------------------------------------------------
	# usage: keyboard kb application
	#
	# return the keyboard name mapping for application
	#------------------------------------------------------------
	local USAGE KB=$1 APP=$2

	USAGE="usage: keyboard kb application"

	if [ "$#" -ne 2 ]
	then
		echo "$USAGE" >&2
		return
	fi

	case "$KB" in
		se)
			case "$APP" in
				rdesktop)
					KB='sv'
					;;
			esac
			;;

		us)
			case "$APP" in
				rdesktop)
					KB='en-us'
					;;
			esac
			;;

		uk)
			case "$APP" in
				rdesktop)
					KB='en-gb'
					;;
			esac
			;;

		br)
			case "$APP" in
				rdesktop)
					KB='pt-br'
					;;
			esac
			;;
	esac

	echo $KB
}

x_sessions()
{
	#------------------------------------------------------------
	# usage: x_sessions {selected}
	#
	# return the selected X sessions
	#------------------------------------------------------------
	local USAGE STATE=$1 R=

	USAGE="usage: x_sessions {selected}"

	if [ "$#" -ne 1 ]
	then
		echo "$USAGE" >&2
		return
	fi

	case "$STATE" in
		selected)
			[ "$X_SESSION_ICA" -eq 1 ] && R="$R ICA"
			[ "$X_SESSION_LINRDP" -eq 1 ] && R="$R LINRDP"
			[ "$X_SESSION_LOCAL" -eq 1 ] && R="$R LOCAL"
			[ "$X_SESSION_NX" -eq 1 ] && R="$R NX"
			[ "$X_SESSION_RDP" -eq 1 ] && R="$R RDP"
			[ "$X_SESSION_TARANTELLA" -eq 1 ] && R="$R TARANTELLA"
			[ "$X_SESSION_VNC" -eq 1 ] && R="$R VNC"
			[ "$X_SESSION_WINCONNECT" -eq 1 ] && R="$R WINCONNECT"
			[ "$X_SESSION_XDM" -eq 1 ] && R="$R XDM"
			[ "$X_SESSION_THINLINC" -eq 1 ] && R="$R THINLINC"
			[ "$X_SESSION_CUSTOM" -eq 1 ] && R="$R CUSTOM"
			;;

		*)
			;;
	esac

	echo $R
}

progressbar()
{
	#------------------------------------------------------------
	# usage: progressbar p100
	#
	# 
	#------------------------------------------------------------
	local USAGE P100=$1

	USAGE="usage: progressbar p100"


	if [ $# != 1 ]
	then
		echo "$USAGE" >&2
		return
	fi

	echo "show $(( 65534 * $P100 / 100 ))" > /proc/splash
}

animate()
{
	#------------------------------------------------------------
	# usage: animate hook
	#
	# 
	#------------------------------------------------------------
	local USAGE HOOK=$1

	USAGE="usage: animate hook"


	if [ $# != 1 ]
	then
		echo "$USAGE" >&2
		return
	fi

	splash "$*"
}

box()
{
	:
}

splash_message()
{
	local MSG="$1"

	if [ -x /usr/bin/fbresolution ]
	then
		CFG=/etc/bootsplash/bootsplash-`/usr/bin/fbresolution`.cfg
		if [ -r $CFG ]
		then
			. $CFG
			sx=$(($text_x + 1))
			sy=$(($text_y + 1))
			if [ -x /usr/bin/fbtruetype ]
			then
				fbtruetype -x $sx -y $sy -t 0x000000 -s $text_size "$MSG"
				fbtruetype -x $text_x -y $text_y -t $text_color \
					-s $text_size "$MSG"
			else
				error "fbtruetype not found"
			fi
		else
			error "Cannot read $CFG"
		fi
	else
		error "fbresolution not found"
	fi
}

steps_to_finish()
{
	local STEPS=9

	[ "$LOCAL_CONFIGURATION_ENABLED" -eq 1 -a \
		-s $LOCAL_CONFIGURATION_DIRECTORY/default.conf ] && \
		STEPS=$((STEPS + 1 ))

	[ "$LOCAL_CONFIGURATION_ENABLED" -eq 1 -a \
		-s $LOCAL_CONFIGURATION_DIRECTORY/$PXES_CLIENT_MAC_ADDR.conf ] && \
		STEPS=$((STEPS + 1 ))

	[ -n "$TFTP" ] && \
		STEPS=$((STEPS + 1 ))


	[ -n "$KCLRCE" ] && \
		STEPS=$((STEPS + 1 ))

	[ -n "$KCLCDIR" ] && \
		STEPS=$((STEPS + 1 ))

	[ "$REMOTE_CONFIGURATION_ENABLED" -eq 1 ] && \
		STEPS=$((STEPS + 1 ))

	[ -s /tmp/default.conf ] && \
		STEPS=$((STEPS + 1 ))

 	[ -s /tmp/${PXES_CLIENT_NETWORK}.conf ] && \
		STEPS=$((STEPS + 1 ))

	[ -s /tmp/${PXES_CLIENT_MAC_ADDR}.conf ] && \
		STEPS=$((STEPS + 1 ))

	[ -s /tmp/${PXES_CLIENT_NAME}.conf ] && \
		STEPS=$((STEPS + 1 ))


	case "$X_DRIVER" in
		i81*)
			STEPS=$((STEPS + 1 ))
			;;
	esac
			

	echo $STEPS
}

translate()
{
	local MSG="$@"

	case "$KEYBOARD_LAYOUT" in
		es)
			case "$MSG" in
				'Message')
					MSG='Mensaje'
					;;

				'Continue')
					MSG='Continuar'
					;;

				'Please press the button to continue')
					MSG='Por favor presione el boton para continuar'
					;;
			esac
			;;
	esac

	echo "$MSG"
}

parse_kernel_command_line_options()
{
	#------------------------------------------------------------
	# usage: parse_kernel_command_line_options [cmdline]
	#
	# 
	#------------------------------------------------------------
	local v= val= CMDLINE="$1"

	#if [ $# -eq 1 ]
	#then
	#	CMDLINE="$1"
	#fi

	for v in `get_kclvars $CMDLINE`
	do
		# already used variables (not needed anymore)
		case "$v" in
			boot_messages|\
			local_configuration_enabled|\
			remote_configuration_enabled|\
			configuration_server_name|\
			configuration_directory)
				continue
				;;
		esac

		val=`get_kclval $v $CMDLINE`
		v=`uc $v`
		#message "$v='$val'"
		[ -n "$val" ] && \
			bootmsg "   Setting $v='$val'" && \
			eval "export $v='$val'"
	done
}

modconf()
{
	local OSRELEASE=`/bin/cat /proc/sys/kernel/osrelease`
	local MODCONF=

	if [ "$OSRELEASE" \> "2.6.0" ]
	then
		MODCONF=/etc/modprobe.conf
	else
		MODCONF=/etc/modules.conf
	fi

	echo "$MODCONF"
}

modext()
{
	local OSRELEASE=`/bin/cat /proc/sys/kernel/osrelease`
	local MODEXT=

	if [ "$OSRELEASE" \> "2.6.0" ]
	then
		MODEXT=.ko
	else
		MODEXT=.o
	fi

	echo "$MODEXT"
}

drvdir()
{
	local OSRELEASE=`/bin/cat /proc/sys/kernel/osrelease`
	local MODDIR="/lib/modules/$OSRELEASE"
	local DRVDIR=

	if [ "$OSRELEASE" \> "2.6.0" ]
	then
		DRVDIR="$MODDIR/kernel/"
	else
		DRVDIR="$MODDIR/kernel/"
	fi

	echo "$DRVDIR"
}

network_type()
{
	#------------------------------------------------------------
	# usage: network_type NETWORK_DEVICE
	#
	# 
	#------------------------------------------------------------
	local ND="$1" NT=ethernet

	USAGE="usage: network_type network_device"


	if [ $# != 1 -o -z "$ND" ]
	then
		{
			echo "network_type: argument mismatch."
			echo "$USAGE" 
		} >&2
		return
	fi

	case "$ND" in
		eth*)
			NT='ethernet'
			;;

		ath*|wlan*|ra*)
			NT='wireless'
			;;

		tr*)
			NT='tokenring'
			;;
	esac

	echo "$NT"
	return 0
}

network_device_re()
{
	#------------------------------------------------------------
	# usage: network_device_re NETWORK_TYPE
	#
	# 
	#------------------------------------------------------------
	local NT="$1" NDRE=''

	USAGE="usage: network_device_re network_type"


	if [ $# != 1 -o -z "$NT" ]
	then
		{
			echo "network_device: argument mismatch."
			echo "$USAGE" 
		} >&2
		return
	fi

	case "$NT" in
		'ethernet')
			NDRE='eth[0-9]'
			;;

		'wireless')
			NDRE='\(wlan\|ath\|ra\)[0-9]'
			;;

		'tokenring')
			NDRE='tr[0-9]'
			;;
	esac

	echo "$NDRE"
	return 0
}

xconfnew()
{
	#------------------------------------------------------------
	# usage: xconfnew XV
	#
	# 
	#------------------------------------------------------------
	local XV="$1"

	USAGE="usage: xconfnew XV"


	if [ $# != 1 -o -z "$XV" ]
	then
		{
			echo "xconfnew: argument mismatch."
			echo "$USAGE" 
		} >&2
		return
	fi

	if [ "$XV" -ge 6 ]
	then
		echo "/root/xorg.conf.new"
	else
		echo "/root/XF86Config.new"
	fi

	return 0
}

